package com.mobgen.halo.android.sdk.core;

import android.content.Context;
import android.net.TrafficStats;
import android.support.annotation.Keep;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.mobgen.halo.android.framework.api.HaloFramework;
import com.mobgen.halo.android.framework.common.annotations.Api;
import com.mobgen.halo.android.framework.common.helpers.logger.Halog;
import com.mobgen.halo.android.framework.common.utils.AssertionUtils;
import com.mobgen.halo.android.framework.common.utils.ReflectionUtils;
import com.mobgen.halo.android.framework.network.client.HaloNetClient;
import com.mobgen.halo.android.framework.network.interceptors.HaloCurlInterceptor;
import com.mobgen.halo.android.framework.network.interceptors.HaloLogInterceptor;
import com.mobgen.halo.android.framework.network.interceptors.HaloProfilerInterceptor;
import com.mobgen.halo.android.framework.network.sessions.HaloSessionManager;
import com.mobgen.halo.android.sdk.BuildConfig;
import com.mobgen.halo.android.sdk.R;
import com.mobgen.halo.android.sdk.core.management.HaloManagerApi;
import com.mobgen.halo.android.sdk.core.management.authentication.AuthenticationRecover;
import com.mobgen.halo.android.sdk.core.management.authentication.HaloAuthenticator;
import com.mobgen.halo.android.sdk.core.management.models.Credentials;
import com.mobgen.halo.android.sdk.core.management.models.HaloServerVersion;
import com.mobgen.halo.android.sdk.core.management.segmentation.HaloSegmentationTag;
import com.mobgen.halo.android.sdk.core.management.segmentation.TagCollector;

import java.util.ArrayList;
import java.util.List;

import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

/**
 * Core object of HALO. It keeps the reference to all the important parts of HALO
 * such as the device, the framework or the core API object.
 */
@Keep
public class HaloCore {

    /**
     * Tag to track traffic interceptor
     */
    private static int TRAFFIC_STATS = 8410;

    /**
     * The framework instance.
     */
    private HaloFramework mFramework;
    /**
     * The manager api.
     */
    private HaloManagerApi mManagerApi;

    /**
     * The oauth authenticator.
     */
    private HaloAuthenticator mAuthenticator;

    /**
     * The library version of the sdk.
     */
    private String mLibraryVersion;

    //Device properties
    /**
     * The list of tag collectors.
     */
    private List<TagCollector> mTagCollectors;
    /**
     * Keeps the reference to the version check system with the
     * server.
     */
    @HaloServerVersion.VersionCheck
    private int mServerVersionMatch;

    /**
     * Configuration for the core.
     *
     * @param framework      The framework.
     * @param sessionManager The session manager.
     * @param credentials    The credentials.
     * @param tagCollectors  The tag collectors.
     */
    public HaloCore(@NonNull HaloFramework framework,
                    @NonNull HaloManagerApi managerApi,
                    @NonNull HaloSessionManager sessionManager,
                    @Nullable Credentials credentials,
                    @Nullable List<TagCollector> tagCollectors) {
        AssertionUtils.notNull(framework, "framework");
        AssertionUtils.notNull(managerApi, "managerApi");
        AssertionUtils.notNull(sessionManager, "sessionManager");
        mLibraryVersion = BuildConfig.HALO_SDK_VERSION;
        mServerVersionMatch = HaloServerVersion.NOT_CHECKED;
        mFramework = framework;
        mManagerApi = managerApi;

        TrafficStats.setThreadStatsTag(TRAFFIC_STATS);

        //Setup authentication
        mAuthenticator = new HaloAuthenticator(mFramework, mManagerApi, sessionManager, configureCredentials(credentials));

        //Segmentation collectors
        mTagCollectors = new ArrayList<>(1);
        if (tagCollectors != null) {
            mTagCollectors.addAll(tagCollectors);
        }

        //Setup networking interceptors
        setupNetworking();
    }

    /**
     * Configures the credentials.
     *
     * @param credentials The credentials.
     * @return The credentials obtained even bypassing the configuration.
     */
    @NonNull
    private Credentials configureCredentials(@Nullable Credentials credentials) {
        Credentials finalCredentials = credentials;
        //If no credentials are set, try to get them from the configuration.
        if (finalCredentials == null) {
            Context context = mFramework.context();
            String clientId;
            String clientSecret;

            //Take the credentials from the keystore generated by halo plugin
            if (!framework().isInDebugMode()) {
                clientId = context.getString(R.string.halo_client_id);
                clientSecret = context.getString(R.string.halo_secret_id);
            } else {
                clientId = context.getString(R.string.halo_client_id_debug);
                clientSecret = context.getString(R.string.halo_secret_id_debug);
            }

            //Create the credentials if there are some
            finalCredentials = Credentials.createClient(clientId, clientSecret);
        }
        return finalCredentials;
    }

    /**
     * Initializes the core.
     */
    private void setupNetworking() {
        //Set client config
        HaloNetClient client = framework().network().client();

        //Add interceptors for profiling
        OkHttpClient.Builder builder = client.ok().newBuilder()
                .addInterceptor(new HaloProfilerInterceptor())
                .addInterceptor(new HaloLogInterceptor())
                .addInterceptor(new HaloCurlInterceptor());

        //Try to add the stetho supported interceptor
        Class<?> stethoClass = ReflectionUtils.toClass("com.facebook.stetho.okhttp3.StethoInterceptor");
        if (stethoClass != null) {
            Interceptor instance = (Interceptor) ReflectionUtils.newInstance(stethoClass);
            if (instance != null) {
                builder.addNetworkInterceptor(instance);
            }
        }
        //Override the ok http
        client.overrideOk(builder);
    }

    /**
     * Provides the session manager.
     *
     * @return The session manager.
     */
    @Keep
    @Api(1.3)
    @NonNull
    public HaloSessionManager sessionManager() {
        return mAuthenticator.getSessionManager();
    }

    /**
     * Provides if the library is in a development environment or not.
     *
     * @return True if in development, false otherwise.
     */
    @Keep
    @Api(1.3)
    public boolean debug() {
        return mFramework.isInDebugMode();
    }

    /**
     * Provides the credentials for this middleware.
     *
     * @return The credentials for this middleware.
     */
    @Keep
    @NonNull
    public Credentials credentials() {
        return mAuthenticator.getCredentials();
    }

    /**
     * Sets the new credentials based on the device authentication.
     *
     * @param credentials The credentials.
     */
    @Keep
    @Api(1.3)
    public void credentials(@NonNull Credentials credentials) {
        mAuthenticator.setCredentials(credentials);
    }

    /**
     * Logouts the current session.
     */
    @Keep
    @Api(1.3)
    public void logout() {
        mAuthenticator.logout();
    }

    /**
     * Provides the library version for this middleware.
     *
     * @return The library version of this middleware.
     */
    @Keep
    @Api(1.3)
    @NonNull
    public String version() {
        return mLibraryVersion;
    }

    /**
     * Flushes the session allowing the request of a new token.
     */
    @Keep
    @Api(1.3)
    public void flushSession() {
        mAuthenticator.flushSession();
    }

    /**
     * Set the halo authentication recover.
     *
     * @param authenticationRecover The Auth Recover
     */
    @Keep
    @Api(2.1)
    public void haloAuthRecover(@NonNull AuthenticationRecover authenticationRecover) {
        AssertionUtils.notNull(authenticationRecover, "authenticationRecover");
        mAuthenticator.setAuthenticationRecover(authenticationRecover);
    }

    /**
     * Get the halo authentication recover.
     *
     * @return AuthenticationRecover The Auth Recover
     */
    @Nullable
    @Keep
    @Api(2.1)
    public AuthenticationRecover haloAuthRecover() {
        return mAuthenticator.getAuthenticationRecover();
    }

    /**
     * Provides the current framework instance.
     *
     * @return The framework instance.
     */
    @Keep
    @Api(1.3)
    @NonNull
    public HaloFramework framework() {
        return mFramework;
    }

    /**
     * Adds the manager api access from the core.
     *
     * @return The manager api.
     */
    @Keep
    @Api(2.0)
    @NonNull
    public HaloManagerApi manager() {
        return mManagerApi;
    }

    /**
     * Provides the list of tag collectors that collect tags on application startup.
     *
     * @return The list of tag collectors.
     */
    @Keep
    @Api(1.3)
    @NonNull
    public List<TagCollector> tagCollectors() {
        //Collectors is just a read object, not a writable one
        return new ArrayList<>(mTagCollectors);
    }

    /**
     * Provides the server version check.
     *
     * @return The
     */
    @HaloServerVersion.VersionCheck
    public int serverVersionCheck() {
        return mServerVersionMatch;
    }

    /**
     * Sets the server version check.
     *
     * @param version The version.
     */
    public void serverVersionCheck(@Nullable HaloServerVersion version) {
        if (version != null) {
            if (version.isOutdated(version())) {
                mServerVersionMatch = HaloServerVersion.OUTDATED;
                printVersionInvalidMessage(version);
            } else {
                mServerVersionMatch = HaloServerVersion.VALID;
            }
        } else {
            mServerVersionMatch = HaloServerVersion.NOT_CHECKED;
        }
    }

    /**
     * Provides the list of segmentation tags.
     *
     * @return The tags.
     */
    @NonNull
    public List<HaloSegmentationTag> segmentationTags() {
        StringBuilder builder = new StringBuilder("\n");
        builder.append("-------------------- USER TAGS --------------------\n");
        List<HaloSegmentationTag> segmentationTags = new ArrayList<>(mTagCollectors.size());
        for (TagCollector collector : mTagCollectors) {
            HaloSegmentationTag tag = collector.collect(mFramework.context());
            if (tag != null) {
                builder.append(tag.toString()).append("\n");
                segmentationTags.add(tag);
            }
        }
        builder.append("-------------------- USER TAGS --------------------\n");
        //Log the tags being sent
        Halog.d(getClass(), builder.toString());
        return segmentationTags;
    }

    /**
     * Checks if the version is outdated with the server.
     *
     * @return True if it is updated or not.
     */
    @Keep
    @Api(1.3)
    public boolean isVersionValid() {
        return mServerVersionMatch == HaloServerVersion.NOT_CHECKED ||
                mServerVersionMatch == HaloServerVersion.VALID;
    }

    /**
     * Prints the server version invalid message.
     *
     * @param version The version.
     */
    private void printVersionInvalidMessage(@NonNull HaloServerVersion version) {
        String versionMessage = "The version of the Halo SDK you are using is outdated. Please update to ensure there are no breaking changes. " +
                "Minimum version:" + version.getHaloVersion() +
                ". Version changelog: " + version.getChangeLogUrl();
        Halog.w(getClass(), versionMessage);
    }
}
