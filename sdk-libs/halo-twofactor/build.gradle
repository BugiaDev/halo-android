apply plugin: 'com.android.library'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'grill'
apply plugin: 'jacoco'

//Known issue in jacoco: https://github.com/robolectric/robolectric/issues/2230
jacoco {
    toolVersion = "${rootProject.ext.jacocoVersion}"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode grill.CI.getCommitRevision()
        versionName "${rootProject.ext.haloVersion}"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
            jacoco {
                includeNoLocationClasses = true
            }
            setIgnoreFailures(rootProject.ext.ignoreTestFailures)
        }
    }

    lintOptions {
        disable 'InvalidPackage' //For okio https://github.com/square/okio/issues/58
    }
}

dependencies {
    api project(":halo-notifications")
    api "com.mobgen.halo.android:halo-sdk:${rootProject.ext.haloVersion}"
    annotationProcessor "com.bluelinelabs:logansquare-compiler:${rootProject.ext.loganSquareVersion}"

    //Testing dependencies
    testAnnotationProcessor "com.bluelinelabs:logansquare-compiler:${rootProject.ext.loganSquareVersion}"
    testApi "com.mobgen.halo.android:halo-testing:${rootProject.ext.haloVersion}"
}

/**
 * Distribution
 */
group = "${rootProject.ext.haloGroup}"
version = "${rootProject.ext.haloVersion}"

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
}

task javadocJar(type: Jar, dependsOn: "documentationRelease") {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task prepareReleaseDependencies {
    println ':halo-twofactor:prepareReleaseDependencies'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

grill {
    distribute {
        libName 'HALO Auth'
        libDescription 'Library plugin for HALO that helps on social authentication and share tasks.'
        libDevId "halo-mobgen"
        libDevName "MOBGEN"
        libDevEmail "halo@mobgen.com"
        libSiteUrl "https://halo.mobgen.com"
        libGitUrl "https://github.com/mobgen/halo-android/tree/master/sdk-libs/halo-twofactor"
        bintrayRepoName "HALO-TwoFactor"
        bintrayUser System.getenv("HALO_BINTRAY_USER")
        bintrayKey System.getenv("HALO_BINTRAY_KEY")
        bintrayMavenCentralUser System.getenv("HALO_SONATYPE_USER")
        bintrayMavenCentralPassword System.getenv("HALO_SONATYPE_PASSWORD")
        bintrayArtifactJavadoc project.tasks.getByName("javadocJar")
        bintrayArtifactSources project.tasks.getByName("sourcesJar")
        bintrayMavenSync project.hasProperty("sync")
    }
    documentation {
        templateDir "/../docs/template"
    }
    coverage {
        excludes(['**/*$JsonObjectMapper*.*'])
    }
    codeQuality {
        host "${rootProject.ext.sonarHost}"
        projectKey "halo:auth"
        projectName "Halo auth SDK"
        projectVersion "${rootProject.ext.sonarVersion}"
        dbHost "${rootProject.ext.sonarDbHost}"
        dbUser "${rootProject.ext.sonarUser}"
        dbPassword "${rootProject.ext.sonarPassword}"
    }
}