apply plugin: 'com.android.library'
apply plugin: 'grill'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode grill.CI.getCommitRevision()
        versionName "${rootProject.ext.haloVersion}"
    }

    lintOptions {
        disable 'InvalidPackage' //For okio https://github.com/square/okio/issues/58
    }
}

dependencies {
    api "com.mobgen.halo.android:halo-sdk:${rootProject.ext.haloVersion}"
    api "com.google.firebase:firebase-core:${rootProject.ext.firebaseVersion}"
    testApi 'junit:junit:4.12'
}


/**
 * Distribution
 */
group = "${rootProject.ext.haloGroup}"
version = "${rootProject.ext.haloVersion}"

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

tasks.withType(Javadoc) {
    options.addStringOption('encoding', 'UTF-8')
}

task javadocJar(type: Jar, dependsOn: "documentationRelease") {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

android.variantFilter { variant ->
    if(!project.hasProperty("prepare${variant.name.capitalize()}Dependencies")) {
        task "prepare${variant.name.capitalize()}Dependencies"()
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

grill {
    distribute {
        libName 'HALO Analytics'
        libDescription 'Analytics library to handle application events.'
        libDevId "halo-mobgen"
        libDevName "MOBGEN"
        libDevEmail "halo@mobgen.com"
        libSiteUrl "https://halo.mobgen.com"
        libGitUrl "https://github.com/mobgen/halo-android/tree/master/sdk-libs/halo-analytics"
        bintrayRepoName "HALO-Analytics"
        bintrayUser System.getenv("HALO_BINTRAY_USER")
        bintrayKey System.getenv("HALO_BINTRAY_KEY")
        bintrayMavenCentralUser System.getenv("HALO_SONATYPE_USER")
        bintrayMavenCentralPassword System.getenv("HALO_SONATYPE_PASSWORD")
        bintrayArtifactJavadoc project.tasks.getByName("javadocJar")
        bintrayArtifactSources project.tasks.getByName("sourcesJar")
        bintrayMavenSync project.hasProperty("sync")
    }
    documentation {
        templateDir "/../docs/template"
    }
    coverage {}
}